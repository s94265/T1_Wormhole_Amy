// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace T1_Wormhole_2._0._1.Models.Database;

public partial class WormHoleContext : DbContext
{
    public WormHoleContext(DbContextOptions<WormHoleContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Article> Articles { get; set; }

    public virtual DbSet<ArticleResponse> ArticleResponses { get; set; }

    public virtual DbSet<BoManager> BoManagers { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventObtain> EventObtains { get; set; }

    public virtual DbSet<ForumCoin> ForumCoins { get; set; }

    public virtual DbSet<Judge> Judges { get; set; }

    public virtual DbSet<Login> Logins { get; set; }

    public virtual DbSet<LoginRecord> LoginRecords { get; set; }

    public virtual DbSet<Obtain> Obtains { get; set; }

    public virtual DbSet<ObtainStatus> ObtainStatuses { get; set; }

    public virtual DbSet<Participation> Participations { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Relation> Relations { get; set; }

    public virtual DbSet<UserInfo> UserInfos { get; set; }

    public virtual DbSet<UserStatus> UserStatuses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Article>(entity =>
        {
            entity.HasKey(e => e.ArticleId).HasName("PK_文章列表");

            entity.ToTable("Article");

            entity.Property(e => e.ArticleId)
                .HasComment("文章ID")
                .HasColumnName("ArticleID");
            entity.Property(e => e.Content).HasComment("文章內容");
            entity.Property(e => e.CreateTime)
                .HasComment("文章創建時間")
                .HasColumnType("datetime")
                .HasColumnName("Create time");
            entity.Property(e => e.ReleaseBy).HasComment("新聞發布者ID");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("文章標題");
            entity.Property(e => e.Type).HasComment("文章類型(新聞/討論)");
            entity.Property(e => e.WriterId)
                .HasComment("文章創作者ID")
                .HasColumnName("WriterID");

            entity.HasOne(d => d.ReleaseByNavigation).WithMany(p => p.Articles)
                .HasForeignKey(d => d.ReleaseBy)
                .HasConstraintName("FK_Article_BO_Managers");

            entity.HasOne(d => d.Writer).WithMany(p => p.Articles)
                .HasForeignKey(d => d.WriterId)
                .HasConstraintName("FK_Article_User");
        });

        modelBuilder.Entity<ArticleResponse>(entity =>
        {
            entity.ToTable("ArticleResponse");

            entity.Property(e => e.Id)
                .HasComment("留言ID")
                .HasColumnName("ID");
            entity.Property(e => e.ArticleId)
                .HasComment("文章ID")
                .HasColumnName("ArticleID");
            entity.Property(e => e.Comment)
                .HasMaxLength(200)
                .HasComment("留言");
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasComment("留言者ID")
                .HasColumnName("UserID");

            entity.HasOne(d => d.Article).WithMany(p => p.ArticleResponses)
                .HasForeignKey(d => d.ArticleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ArticleResponse_Article");

            entity.HasOne(d => d.User).WithMany(p => p.ArticleResponses)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ArticleResponse_User");
        });

        modelBuilder.Entity<BoManager>(entity =>
        {
            entity.HasKey(e => e.ManagerId);

            entity.ToTable("BO_Managers");

            entity.Property(e => e.ManagerId)
                .HasComment("管理員ID")
                .HasColumnName("ManagerID");
            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("管理員帳號");
            entity.Property(e => e.CreateTime)
                .HasComment("管理員創建時間")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("管理員電子郵箱");
            entity.Property(e => e.Language)
                .HasMaxLength(50)
                .HasComment("語言");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("管理員姓名");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(256)
                .HasComment("管理員密碼");
            entity.Property(e => e.Permissions).HasComment("管理員權限");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasComment("管理員手機");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasComment("管理員狀態");
            entity.Property(e => e.Team)
                .HasMaxLength(50)
                .HasComment("管理員群組");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK_SiteEvent");

            entity.ToTable("Event");

            entity.Property(e => e.EventId)
                .HasComment("活動ID")
                .HasColumnName("EventID");
            entity.Property(e => e.Coin).HasComment("活動發放貨幣");
            entity.Property(e => e.CreateTime)
                .HasComment("活動建立時間")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.EventContent)
                .HasMaxLength(500)
                .HasComment("活動內容");
            entity.Property(e => e.EventTarget).HasComment("用來新增活動目標數量");
            entity.Property(e => e.EventTimeEnd)
                .HasComment("活動結束時間")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.EventTimeStrat)
                .HasComment("活動開始時間")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.KeyWord)
                .HasMaxLength(20)
                .HasComment("用來記錄文章標題是否符合條件");
            entity.Property(e => e.ManagerId)
                .HasComment("管理者ID")
                .HasColumnName("ManagerID");
            entity.Property(e => e.Marquee)
                .HasMaxLength(50)
                .HasComment("活動跑馬燈");
            entity.Property(e => e.Obtain).HasComment("活動發放稱號");
            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .HasComment("活動標題");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("活動類別");

            entity.HasOne(d => d.Manager).WithMany(p => p.Events)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SiteEvent_BO_Managers");
        });

        modelBuilder.Entity<EventObtain>(entity =>
        {
            entity.HasKey(e => new { e.ObtainId, e.EventId }).HasName("PK_EventObtain_1");

            entity.ToTable("EventObtain");

            entity.Property(e => e.ObtainId)
                .HasComment("稱號ID")
                .HasColumnName("ObtainID");
            entity.Property(e => e.EventId)
                .HasComment("活動ID")
                .HasColumnName("EventID");
            entity.Property(e => e.ObtainAmount).HasComment("稱號數量");

            entity.HasOne(d => d.Event).WithMany(p => p.EventObtains)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventObtain_SiteEvent");

            entity.HasOne(d => d.Obtain).WithMany(p => p.EventObtains)
                .HasForeignKey(d => d.ObtainId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventObtain_Obtain");
        });

        modelBuilder.Entity<ForumCoin>(entity =>
        {
            entity.HasKey(e => e.CoinId).HasName("PK_ForumCoins_1");

            entity.HasIndex(e => e.UserId, "IX_ForumCoins");

            entity.Property(e => e.CoinId)
                .HasComment("論壇幣ID")
                .HasColumnName("CoinID");
            entity.Property(e => e.AccessTime)
                .HasDefaultValueSql("(getdate())")
                .HasComment("論壇幣獲得時間")
                .HasColumnType("datetime");
            entity.Property(e => e.CoinAmount).HasComment("論壇幣數量");
            entity.Property(e => e.CoinSource)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("論壇幣獲得來源");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasComment("論壇幣處理狀態");
            entity.Property(e => e.UserId)
                .HasComment("使用者ID")
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.ForumCoins)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ForumCoins_User");
        });

        modelBuilder.Entity<Judge>(entity =>
        {
            entity.ToTable("Judge");

            entity.Property(e => e.JudgeId).HasColumnName("JudgeID");
            entity.Property(e => e.Content).HasComment("推薦遊戲內容");
            entity.Property(e => e.Picture)
                .HasComment("遊戲圖")
                .HasColumnName("picture");
            entity.Property(e => e.Price).HasComment("官方售價");
            entity.Property(e => e.Rate).HasComment("蟲洞編推薦分數");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("遊戲名稱");
            entity.Property(e => e.Type).HasComment("遊戲平台類型");
        });

        modelBuilder.Entity<Login>(entity =>
        {
            entity.HasKey(e => e.Account);

            entity.ToTable("Login");

            entity.HasIndex(e => e.Email, "IX_Login").IsUnique();

            entity.Property(e => e.Account)
                .HasMaxLength(20)
                .HasComment("帳號");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("電子郵箱");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(256)
                .HasComment("密碼");
        });

        modelBuilder.Entity<LoginRecord>(entity =>
        {
            entity.ToTable("LoginRecord");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Time).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.LoginRecords)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LoginRecord_UserInfo");
        });

        modelBuilder.Entity<Obtain>(entity =>
        {
            entity.ToTable("Obtain");

            entity.Property(e => e.ObtainId)
                .HasComment("稱號ID")
                .HasColumnName("ObtainID");
            entity.Property(e => e.Condition)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("稱號獲取條件");
            entity.Property(e => e.ConditionType)
                .HasMaxLength(30)
                .HasComment("條件類型(尚未決定)");
            entity.Property(e => e.ConditionValue).HasComment("條件類型的值(尚未確定)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("稱號名稱");
            entity.Property(e => e.Type).HasComment("稱號類型");
        });

        modelBuilder.Entity<ObtainStatus>(entity =>
        {
            entity.HasKey(e => new { e.ObtainId, e.UserId });

            entity.ToTable("ObtainStatus");

            entity.Property(e => e.ObtainId)
                .HasComment("稱號ID")
                .HasColumnName("ObtainID");
            entity.Property(e => e.UserId)
                .HasComment("使用者ID")
                .HasColumnName("UserID");
            entity.Property(e => e.Count).HasComment("稱號數量");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasComment("取得這個Obtain後的使用狀態如已派發、已領取、使用中");
            entity.Property(e => e.Time)
                .HasComment("稱號獲得時間")
                .HasColumnType("smalldatetime");

            entity.HasOne(d => d.Obtain).WithMany(p => p.ObtainStatuses)
                .HasForeignKey(d => d.ObtainId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ObtainStatus_Obtain");

            entity.HasOne(d => d.User).WithMany(p => p.ObtainStatuses)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ObtainStatus_User");
        });

        modelBuilder.Entity<Participation>(entity =>
        {
            entity.HasKey(e => new { e.EventId, e.UserId }).HasName("PK_EventJoin");

            entity.ToTable("Participation");

            entity.Property(e => e.EventId)
                .HasComment("活動ID")
                .HasColumnName("EventID");
            entity.Property(e => e.UserId)
                .HasComment("使用者ID")
                .HasColumnName("UserID");
            entity.Property(e => e.JoinTime)
                .HasComment("活動參與時間")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasComment("活動參加狀態");

            entity.HasOne(d => d.Event).WithMany(p => p.Participations)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventJoin_SiteEvent");

            entity.HasOne(d => d.User).WithMany(p => p.Participations)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventJoin_User");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => new { e.ArticleId, e.UserId }).HasName("PK_Rating");
                entity.ToTable("Rating");

            entity.Property(e => e.ArticleId)
                .HasComment("文章ID")
                .HasColumnName("ArticleID");
            entity.Property(e => e.NegativeRating)
                .HasDefaultValue(0)
                .HasComment("負評數");
            entity.Property(e => e.PositiveRating)
                .HasDefaultValue(0)
                .HasComment("好評數");
            entity.Property(e => e.UserId)
                .HasComment("使用者ID")
                .HasColumnName("UserID");

            entity.HasOne(d => d.Article).WithMany()
                .HasForeignKey(d => d.ArticleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rating_Article");

            entity.HasOne(d => d.User).WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rating_User");
        });

        modelBuilder.Entity<Relation>(entity =>
        {
            entity.HasKey(e => new { e.InviterId, e.InviteeId });

            entity.ToTable("Relation");

            entity.Property(e => e.InviterId).HasColumnName("InviterID");
            entity.Property(e => e.InviteeId).HasColumnName("InviteeID");
            entity.Property(e => e.Invite)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RelationType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Invitee).WithMany(p => p.RelationInvitees)
                .HasForeignKey(d => d.InviteeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Relation_UserInfo1");

            entity.HasOne(d => d.Inviter).WithMany(p => p.RelationInviters)
                .HasForeignKey(d => d.InviterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Relation_UserInfo");
        });

        modelBuilder.Entity<UserInfo>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_User");

            entity.ToTable("UserInfo");

            entity.HasIndex(e => e.Email, "IX_User_1").IsUnique();

            entity.Property(e => e.UserId)
                .HasComment("使用者ID")
                .HasColumnName("UserID");
            entity.Property(e => e.Birthday).HasComment("使用者生日");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("使用者電子郵箱");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("使用者姓名");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .HasComment("使用者顯示暱稱");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("使用者電話");
            entity.Property(e => e.Photo).HasComment("頭像");
            entity.Property(e => e.Sex).HasComment("使用者生理性別");
            entity.Property(e => e.SignatureLine)
                .HasMaxLength(100)
                .HasComment("簽名檔");
            entity.Property(e => e.Status).HasComment("是否為登入狀態");
            entity.Property(e => e.Wallet).HasComment("論壇幣數量");
            entity.Property(u => u.Position).HasColumnType("geography");


            entity.HasOne(d => d.EmailNavigation).WithOne(p => p.UserInfo)
                .HasPrincipalKey<Login>(p => p.Email)
                .HasForeignKey<UserInfo>(d => d.Email)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserInfo_Login");
        });

        modelBuilder.Entity<UserStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_使用者狀態表");

            entity.ToTable("UserStatus");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasComment("使用者ID")
                .HasColumnName("ID");
            entity.Property(e => e.CommentCount).HasComment("使用者留言數");
            entity.Property(e => e.Level).HasComment("使用者等級");
            entity.Property(e => e.PostCount).HasComment("使用者發文數");
            entity.Property(e => e.ReadCount).HasComment("使用者閱讀數");
            entity.Property(e => e.Status).HasComment("使用者是否達瀏覽數上限");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UserStatus)
                .HasForeignKey<UserStatus>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserStatus_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}